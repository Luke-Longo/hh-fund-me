{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdrawl",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x0fbb4081ad2cc633b0e89a6c6b140f397c38ae8ba227de132ad912d131d2ec34",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1073147",
    "logsBloom": "0x
    "blockHash": "0xdbe74b4d1221712fbca18c7571602cca3dca39f34852b87e16f165d79361a18a",
    "transactionHash": "0x0fbb4081ad2cc633b0e89a6c6b140f397c38ae8ba227de132ad912d131d2ec34",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1073147",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "688e7b36cee1663412572314d4ecfb88",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdrawl\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Luke Longo (but really Patrick Collins)\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A Funding Contract for Crowd Funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract is for creating a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// 1. Pragma\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n// 2. Imports\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\n// 3. Error Codes\\n\\nerror FundMe__NotOwner();\\n\\n// 4. Interfaces, Libraries, Contracts\\n\\n// NatSpec (im not good enough for this yet lol)\\n/**\\n * @title A Funding Contract for Crowd Funding\\n * @author Luke Longo (but really Patrick Collins)\\n * @notice This contract is for creating a sample funding contract\\n * @dev This implements price feeds as our library\\n */\\n\\ncontract FundMe {\\n  // Type Declarations\\n  using PriceConverter for uint256;\\n\\n  // State variables\\n  AggregatorV3Interface private s_priceFeed;\\n  mapping(address => uint256) private s_addressToAmountFunded;\\n  address[] private s_funders;\\n  // Could we make this constant?  /* hint: no! We should make it immutable! */\\n  address private i_owner;\\n  uint256 public constant MINIMUM_USD = 50 * 10**18;\\n\\n  // Modifiers\\n  modifier onlyOwner() {\\n    // require(msg.sender == owner);\\n    if (msg.sender != i_owner) revert FundMe__NotOwner();\\n    _;\\n  }\\n\\n  // Functions Order:\\n  //// constructor\\n  //// receive\\n  //// fallback\\n  //// external\\n  //// public\\n  //// internal\\n  //// private\\n  //// view / pure\\n\\n  constructor(address priceFeedAddress) {\\n    i_owner = msg.sender;\\n    s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n  }\\n\\n  receive() external payable {\\n    fund();\\n  }\\n\\n  fallback() external payable {\\n    fund();\\n  }\\n\\n  function fund() public payable {\\n    require(\\n      msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n      \\\"You need to spend more ETH!\\\"\\n    );\\n    // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n    s_addressToAmountFunded[msg.sender] += msg.value;\\n    s_funders.push(msg.sender);\\n  }\\n\\n  function withdraw() public onlyOwner {\\n    for (\\n      uint256 funderIndex = 0;\\n      funderIndex < s_funders.length;\\n      funderIndex++\\n    ) {\\n      address funder = s_funders[funderIndex];\\n      s_addressToAmountFunded[funder] = 0;\\n    }\\n    // resets the array\\n    s_funders = new address[](0);\\n    // // transfer\\n    // payable(msg.sender).transfer(address(this).balance);\\n    // // send\\n    // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n    // require(sendSuccess, \\\"Send failed\\\");\\n    // call\\n    (bool callSuccess, ) = payable(msg.sender).call{\\n      value: address(this).balance\\n    }(\\\"\\\");\\n    require(callSuccess, \\\"Call failed\\\");\\n  }\\n\\n  function cheaperWithdrawl() public payable onlyOwner {\\n    // loops through and sets the\\n    address[] memory funders = s_funders;\\n    for (uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++) {\\n      address funder = funders[funderIndex];\\n      s_addressToAmountFunded[funder] = 0;\\n    }\\n    s_funders = new address[](0);\\n    (bool callSuccess, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n    require(callSuccess, \\\"Call failed\\\");\\n  }\\n\\n  function getOwner() public view returns (address) {\\n    return i_owner;\\n  }\\n\\n  function getFunder(uint256 index) public view returns (address) {\\n    return s_funders[index];\\n  }\\n\\n  function getAddressToAmountFunded(address funder)\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    return s_addressToAmountFunded[funder];\\n  }\\n\\n  function getPriceFeed() public view returns (AggregatorV3Interface) {\\n    return s_priceFeed;\\n  }\\n}\\n\",\"keccak256\":\"0xc29fa9db6614661b2f4b5ade08ff9e67268878aa1b9ea84edff262c1bb43c67a\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // Goerli ETH / USD Address\\n        // https://docs.chain.link/docs/ethereum-addresses/\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0xb081b7a3618233e2aec6f21a76e773060faa937e85daaab6e685258c30ade119\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200130d3803806200130d833981810160405281019062000037919062000129565b33600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200015b565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000f182620000c4565b9050919050565b6200010381620000e4565b81146200010f57600080fd5b50565b6000815190506200012381620000f8565b92915050565b600060208284031215620001425762000141620000bf565b5b6000620001528482850162000112565b91505092915050565b6111a2806200016b6000396000f3fe60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610142578063b60d42881461016d578063b639412014610177578063d7b4750c146101815761008e565b80630343fb25146100985780633ccfd60b146100d55780636b69a592146100ec578063893d20e8146101175761008e565b3661008e5761008c6101be565b005b6100966101be565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610ada565b6102f7565b6040516100cc9190610b20565b60405180910390f35b3480156100e157600080fd5b506100ea610340565b005b3480156100f857600080fd5b50610101610583565b60405161010e9190610b20565b60405180910390f35b34801561012357600080fd5b5061012c610590565b6040516101399190610b4a565b60405180910390f35b34801561014e57600080fd5b506101576105ba565b6040516101649190610bc4565b60405180910390f35b6101756101be565b005b61017f6105e3565b005b34801561018d57600080fd5b506101a860048036038101906101a39190610c0b565b6108ac565b6040516101b59190610b4a565b60405180910390f35b6802b5e3af16b18800006101fb60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108f490919063ffffffff16565b101561023c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023390610c95565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461028b9190610ce4565b925050819055506002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103c7576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600280549050811015610473576000600282815481106103ed576103ec610d3a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061046b90610d69565b9150506103ca565b50600067ffffffffffffffff81111561048f5761048e610db2565b5b6040519080825280602002602001820160405280156104bd5781602001602082028036833780820191505090505b50600290805190602001906104d39291906109d0565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104fa90610e12565b60006040518083038185875af1925050503d8060008114610537576040519150601f19603f3d011682016040523d82523d6000602084013e61053c565b606091505b5050905080610580576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057790610e73565b60405180910390fd5b50565b6802b5e3af16b188000081565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461066a576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060028054806020026020016040519081016040528092919081815260200182805480156106ee57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106a4575b5050505050905060005b815181101561077957600082828151811061071657610715610d3a565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061077190610d69565b9150506106f8565b50600067ffffffffffffffff81111561079557610794610db2565b5b6040519080825280602002602001820160405280156107c35781602001602082028036833780820191505090505b50600290805190602001906107d99291906109d0565b506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff164760405161082290610e12565b60006040518083038185875af1925050503d806000811461085f576040519150601f19603f3d011682016040523d82523d6000602084013e610864565b606091505b50509050806108a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089f90610e73565b60405180910390fd5b5050565b6000600282815481106108c2576108c1610d3a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061090083610930565b90506000670de0b6b3a764000085836109199190610e93565b6109239190610f1c565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561097957600080fd5b505afa15801561098d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b19190610fda565b5050509150506402540be400816109c89190611055565b915050919050565b828054828255906000526020600020908101928215610a49579160200282015b82811115610a485782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109f0565b5b509050610a569190610a5a565b5090565b5b80821115610a73576000816000905550600101610a5b565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610aa782610a7c565b9050919050565b610ab781610a9c565b8114610ac257600080fd5b50565b600081359050610ad481610aae565b92915050565b600060208284031215610af057610aef610a77565b5b6000610afe84828501610ac5565b91505092915050565b6000819050919050565b610b1a81610b07565b82525050565b6000602082019050610b356000830184610b11565b92915050565b610b4481610a9c565b82525050565b6000602082019050610b5f6000830184610b3b565b92915050565b6000819050919050565b6000610b8a610b85610b8084610a7c565b610b65565b610a7c565b9050919050565b6000610b9c82610b6f565b9050919050565b6000610bae82610b91565b9050919050565b610bbe81610ba3565b82525050565b6000602082019050610bd96000830184610bb5565b92915050565b610be881610b07565b8114610bf357600080fd5b50565b600081359050610c0581610bdf565b92915050565b600060208284031215610c2157610c20610a77565b5b6000610c2f84828501610bf6565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610c7f601b83610c38565b9150610c8a82610c49565b602082019050919050565b60006020820190508181036000830152610cae81610c72565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cef82610b07565b9150610cfa83610b07565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d2f57610d2e610cb5565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610d7482610b07565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610da757610da6610cb5565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610dfc600083610de1565b9150610e0782610dec565b600082019050919050565b6000610e1d82610def565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610e5d600b83610c38565b9150610e6882610e27565b602082019050919050565b60006020820190508181036000830152610e8c81610e50565b9050919050565b6000610e9e82610b07565b9150610ea983610b07565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ee257610ee1610cb5565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f2782610b07565b9150610f3283610b07565b925082610f4257610f41610eed565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f6c81610f4d565b8114610f7757600080fd5b50565b600081519050610f8981610f63565b92915050565b6000819050919050565b610fa281610f8f565b8114610fad57600080fd5b50565b600081519050610fbf81610f99565b92915050565b600081519050610fd481610bdf565b92915050565b600080600080600060a08688031215610ff657610ff5610a77565b5b600061100488828901610f7a565b955050602061101588828901610fb0565b945050604061102688828901610fc5565b935050606061103788828901610fc5565b925050608061104888828901610f7a565b9150509295509295909350565b600061106082610f8f565b915061106b83610f8f565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156110aa576110a9610cb5565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110e7576110e6610cb5565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561112457611123610cb5565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561116157611160610cb5565b5b82820290509291505056fea2646970667358221220710268eadece3461a86dd86335f6b1a55ecfea83f406a15424abdd9f855ce17f64736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610142578063b60d42881461016d578063b639412014610177578063d7b4750c146101815761008e565b80630343fb25146100985780633ccfd60b146100d55780636b69a592146100ec578063893d20e8146101175761008e565b3661008e5761008c6101be565b005b6100966101be565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610ada565b6102f7565b6040516100cc9190610b20565b60405180910390f35b3480156100e157600080fd5b506100ea610340565b005b3480156100f857600080fd5b50610101610583565b60405161010e9190610b20565b60405180910390f35b34801561012357600080fd5b5061012c610590565b6040516101399190610b4a565b60405180910390f35b34801561014e57600080fd5b506101576105ba565b6040516101649190610bc4565b60405180910390f35b6101756101be565b005b61017f6105e3565b005b34801561018d57600080fd5b506101a860048036038101906101a39190610c0b565b6108ac565b6040516101b59190610b4a565b60405180910390f35b6802b5e3af16b18800006101fb60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108f490919063ffffffff16565b101561023c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023390610c95565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461028b9190610ce4565b925050819055506002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103c7576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600280549050811015610473576000600282815481106103ed576103ec610d3a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061046b90610d69565b9150506103ca565b50600067ffffffffffffffff81111561048f5761048e610db2565b5b6040519080825280602002602001820160405280156104bd5781602001602082028036833780820191505090505b50600290805190602001906104d39291906109d0565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104fa90610e12565b60006040518083038185875af1925050503d8060008114610537576040519150601f19603f3d011682016040523d82523d6000602084013e61053c565b606091505b5050905080610580576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057790610e73565b60405180910390fd5b50565b6802b5e3af16b188000081565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461066a576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060028054806020026020016040519081016040528092919081815260200182805480156106ee57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106a4575b5050505050905060005b815181101561077957600082828151811061071657610715610d3a565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061077190610d69565b9150506106f8565b50600067ffffffffffffffff81111561079557610794610db2565b5b6040519080825280602002602001820160405280156107c35781602001602082028036833780820191505090505b50600290805190602001906107d99291906109d0565b506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff164760405161082290610e12565b60006040518083038185875af1925050503d806000811461085f576040519150601f19603f3d011682016040523d82523d6000602084013e610864565b606091505b50509050806108a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089f90610e73565b60405180910390fd5b5050565b6000600282815481106108c2576108c1610d3a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061090083610930565b90506000670de0b6b3a764000085836109199190610e93565b6109239190610f1c565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561097957600080fd5b505afa15801561098d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b19190610fda565b5050509150506402540be400816109c89190611055565b915050919050565b828054828255906000526020600020908101928215610a49579160200282015b82811115610a485782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109f0565b5b509050610a569190610a5a565b5090565b5b80821115610a73576000816000905550600101610a5b565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610aa782610a7c565b9050919050565b610ab781610a9c565b8114610ac257600080fd5b50565b600081359050610ad481610aae565b92915050565b600060208284031215610af057610aef610a77565b5b6000610afe84828501610ac5565b91505092915050565b6000819050919050565b610b1a81610b07565b82525050565b6000602082019050610b356000830184610b11565b92915050565b610b4481610a9c565b82525050565b6000602082019050610b5f6000830184610b3b565b92915050565b6000819050919050565b6000610b8a610b85610b8084610a7c565b610b65565b610a7c565b9050919050565b6000610b9c82610b6f565b9050919050565b6000610bae82610b91565b9050919050565b610bbe81610ba3565b82525050565b6000602082019050610bd96000830184610bb5565b92915050565b610be881610b07565b8114610bf357600080fd5b50565b600081359050610c0581610bdf565b92915050565b600060208284031215610c2157610c20610a77565b5b6000610c2f84828501610bf6565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610c7f601b83610c38565b9150610c8a82610c49565b602082019050919050565b60006020820190508181036000830152610cae81610c72565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cef82610b07565b9150610cfa83610b07565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d2f57610d2e610cb5565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610d7482610b07565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610da757610da6610cb5565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610dfc600083610de1565b9150610e0782610dec565b600082019050919050565b6000610e1d82610def565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610e5d600b83610c38565b9150610e6882610e27565b602082019050919050565b60006020820190508181036000830152610e8c81610e50565b9050919050565b6000610e9e82610b07565b9150610ea983610b07565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ee257610ee1610cb5565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f2782610b07565b9150610f3283610b07565b925082610f4257610f41610eed565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f6c81610f4d565b8114610f7757600080fd5b50565b600081519050610f8981610f63565b92915050565b6000819050919050565b610fa281610f8f565b8114610fad57600080fd5b50565b600081519050610fbf81610f99565b92915050565b600081519050610fd481610bdf565b92915050565b600080600080600060a08688031215610ff657610ff5610a77565b5b600061100488828901610f7a565b955050602061101588828901610fb0565b945050604061102688828901610fc5565b935050606061103788828901610fc5565b925050608061104888828901610f7a565b9150509295509295909350565b600061106082610f8f565b915061106b83610f8f565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156110aa576110a9610cb5565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110e7576110e6610cb5565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561112457611123610cb5565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561116157611160610cb5565b5b82820290509291505056fea2646970667358221220710268eadece3461a86dd86335f6b1a55ecfea83f406a15424abdd9f855ce17f64736f6c63430008080033",
  "devdoc": {
    "author": "Luke Longo (but really Patrick Collins)",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {},
    "title": "A Funding Contract for Crowd Funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract is for creating a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 58,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 65,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 67,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "i_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}